#!/bin/bash
# Harinder Gakhal
# 1/19/20
# cs344 hw1

# Font colors
GREEN='\033[92m'
ENDC='\033[0m'

# dims() will print out the dimensions of the matrix (row col)
# $ ./matrix dims [MATRIX]
dims () {
	# If user provided name of matrix file check if it exists, otherwise read from stdin
	if [[ -z $1 ]]; then
		FILE=${1:-/dev/stdin}
	elif [[ -e "$1" ]]; then
		FILE=$1
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	fi

	# Count the number of rows an columns
	row=0
	while read line; do
		col=0
		for i in $line; do
			(( col++ ))
		done
		(( row++ ))
	done < $FILE

	# Echo rows and columns to stdin
	echo "$row $col"
	return 0
}

add () {
	# Check if both matrices exist
	if [[ -e "$1" && -e "$2" ]]; then
		FILE1=$1
		FILE2=$2
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	elif [[ !(-e "$2") ]]; then
		echo "$2 does not exist!" 1>&2
		exit 1
	fi

	# Check if the dimensions of both matrices are the same
	if [[ $(dims $FILE2) == $(dims $FILE1) ]]; then
		# Use 2D arrays (dictionary) to perform calculations
		declare -A matrixA
		declare -A matrixB

		# Build first array
		row=0
		while read line; do
			col=0
			for i in $line; do
				matrixA[$row,$col]=$i
				(( col++ ))
			done
			(( row++ ))
		done < "$FILE1"

		# Build second array
		row=0
		while read line; do
			col=0
			for i in $line; do
				matrixB[$row,$col]=$i
				(( col++ ))
			done
			(( row++ ))
		done < "$FILE2"

		# Print out the sum of both matrices
		for (( i = 0; i < $row; i++ )); do
			for (( j = 0; j < $col; j++ )); do
				echo -en "$(( ${matrixA[$i,$j]} + ${matrixB[$i,$j]} ))"
				if [[ $j -lt $col-1 ]]; then
					echo -en "\t"
				fi
			done
			echo
		done

		return 0
	else
		# Print error to stderr
		echo "Matrices are not the same size!" 1>&2
		exit 2
	fi
}

mean () {
	# If user provided name of matrix file check if it exists, otherwise read from stdin
	if [[ -z $1 ]]; then
		FILE=${1:-/dev/stdin}
	elif [[ -e "$1" ]]; then
		FILE=$1
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	fi

	# Use 2D array (dictionary) to perform calculations
	declare -A matrixA

	# Build 2D array
	row=0
	while read line; do
		col=0
		for i in $line; do
			matrixA[$row,$col]=$i
			(( col++ ))
		done
		(( row++ ))
	done < "$FILE"

	# Calculate vector mean, and print to stdout
	for (( i = 0; i < $col; i++ )); do
		sum=0
		for (( j = 0; j < $row; j++ )); do
			sum=$(( sum + ${matrixA[$j,$i]} ))
		done
		echo -en "$(( ($sum + ($row/2)*( ($sum>0)*2-1 )) / $row ))"
		if [[ $i -lt $col-1 ]]; then
			echo -en "\t"
		fi
	done
	echo

	return 0
}

transpose () {
	# If user provided name of matrix file check if it exists, otherwise read from stdin
	if [[ -z $1 ]]; then
		FILE=${1:-/dev/stdin}
	elif [[ -e "$1" ]]; then
		FILE=$1
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	fi

	# Use 2D array (dictionary) to perform calculations
	declare -A matrixA

	# Build 2D array
	row=0
	while read line; do
		col=0
		for i in $line; do
			matrixA[$row,$col]=$i
			(( col++ ))
		done
		(( row++ ))
	done < "$FILE"

	# Print array in transposed form to stdout
	for (( i = 0; i < $col; i++ )); do
		for (( j = 0; j < $row; j++ )); do
			echo -en "${matrixA[$j,$i]}"
			if [[ $j -lt $row-1 ]]; then
				echo -en "\t"
			fi
		done
		echo
	done
}

multiply () {
	# Check if both matrices exist
	if [[ -e "$1" && -e "$2" ]]; then
		FILE1=$1
		FILE2=$2
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	elif [[ !(-e "$2") ]]; then
		echo "$2 does not exist!" 1>&2
		exit 1
	fi

	# Check to see if the number of columns of the 1st matrix equals the number of rows of the 2nd matrix
	if [[ `dims $FILE1 | cut -d " " -f 2` == `dims $FILE2 | cut -d " " -f 1` ]]; then
		# Use 2D arrays (dictionary) to perform calculations
		declare -A matrixA
		declare -A matrixB

		# Build first array
		rowA=0
		while read line; do
			colA=0
			for i in $line; do
				matrixA[$rowA,$colA]=$i
				(( colA++ ))
			done
			(( rowA++ ))
		done < "$FILE1"

		# Build second array
		rowB=0
		while read line; do
			colB=0
			for i in $line; do
				matrixB[$rowB,$colB]=$i
				(( colB++ ))
			done
			(( rowB++ ))
		done < "$FILE2"

		# Traverse matrices, and compute the product
		for (( i = 0; i < $rowA; i++ )); do
			for (( j = 0; j < $colB; j++ )); do
				mult=0
				for (( k = 0; k < $colA; k++ )); do
					mult="$(( mult + ${matrixA[$i,$k]} * ${matrixB[$k,$j]} ))"
				done
				echo -en "$mult"
				if [[ $j -lt $colB-1 ]]; then
					echo -en "\t"
				fi
			done
			echo
		done

		return 0
	else
		# Print error to stderr
		echo "Number of columns of the 1st matrix must equal to the number of rows of the 2nd one!" 1>&2
		exit 2
	fi
}

# Switch statement to select function
case $1 in
	"dims")
		if [[ $# -gt 2 ]]; then
			echo "Too many args!" 1>&2	# If user gave too any arguments, throw error to stderr
			exit 3
		else
			dims $2
		fi
		;;
	"add")
		if [[ $# -gt 3 ]]; then
			echo "Too many args!" 1>&2	# If user gave too any arguments, throw error to stderr
			exit 3
		else
			add $2 $3
		fi
		;;
	"mean")
		if [[ $# -gt 2 ]]; then
			echo "Too many args!" 1>&2	# If user gave too any arguments, throw error to stderr
			exit 3
		else
			mean $2
		fi
		;;
	"transpose")
		if [[ $# -gt 2 ]]; then
			echo "Too many args!" 1>&2	# If user gave too any arguments, throw error to stderr
			exit 3
		else
			transpose $2
		fi
		;;
	"multiply")
		if [[ $# -gt 3 ]]; then
			echo "Too many args!" 1>&2	# If user gave too any arguments, throw error to stderr
			exit 3
		else
			multiply $2 $3
		fi
		;;
	*)
		# If user did not specify function, throw error to stderr
		echo -e "${GREEN}$1${ENDC} is not a recognized command!" 1>&2
		echo "To use the matrix script, type ./matrix OPERATION [ARGUMENT]..." 1>&2
		echo -e "\tmatrix dims [MATRIX]\n\tmatrix transpose [MATRIX]\n\tmatrix mean [MATRIX]\n\tmatrix add MATRIX_LEFT MATRIX_RIGHT\n\tmatrix multiply MATRIX_LEFT MATRIX_RIGHT" 1>&2
		exit 3
		;;
esac
