#!/bin/bash
# Harinder
# 1/15/20
# cs344 hw1

# dims() will print out the dimensions of the matrix (row col)
dims () {
	if [[ -z $1 ]]; then
		FILE=${1:-/dev/stdin}
	elif [[ -e "$1" ]]; then
		FILE=$1
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	fi

	row=0
	col=0
	while read line; do
		col=0
		for i in $line; do
			(( col++ ))
		done
		(( row++ ))
	done < $FILE

	echo "$row $col"
	return 0
}

add () {
	if [[ -e "$1" && -e "$2" ]]; then
		FILE1=$1
		FILE2=$2
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	elif [[ !(-e "$2") ]]; then
		echo "$2 does not exist!" 1>&2
		exit 1
	fi

	if [[ $(dims $FILE2) == $(dims $FILE1) ]]; then
		declare -A matrixA
		declare -A matrixB
		declare -A matrixC

		row=0
		col=0
		while read line; do
			col=0
			for i in $line; do
				matrixA[$row,$col]=$i
				(( col++ ))
			done
			(( row++ ))
		done < "$FILE1"

		row=0
		col=0
		while read line; do
			col=0
			for i in $line; do
				matrixB[$row,$col]=$i
				(( col++ ))
			done
			(( row++ ))
		done < "$FILE2"

		for (( i = 0; i < $row; i++ )); do
			for (( j = 0; j < $col; j++ )); do
				matrixC[$i,$j]=$(( ${matrixA[$i,$j]} + ${matrixB[$i,$j]} ))
			done
		done

		for (( i = 0; i < $row; i++ )); do
			for (( j = 0; j < $col; j++ )); do
				echo -en "${matrixC[$i,$j]}\t"
			done
			echo
		done

		return 0
	else
		echo "Matrices are not the same size!" 1>&2
		exit 2
	fi
}

mean () {
	if [[ -z $1 ]]; then
		FILE=${1:-/dev/stdin}
	elif [[ -e "$1" ]]; then
		FILE=$1
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	fi

	declare -A matrixA
	declare -A matrixB

	row=0
	col=0
	while read line; do
		col=0
		for i in $line; do
			matrixA[$row,$col]=$i
			(( col++ ))
		done
		(( row++ ))
	done < "$FILE"

	for (( i = 0; i < $col; i++ )); do
		sum=0
		for (( j = 0; j < $row; j++ )); do
			sum=$(( sum + ${matrixA[$j,$i]} ))
		done
		matrixB[$i]=$(( $sum/$row ))
	done

	for (( j = 0; j < $col; j++ )); do
		echo -en "${matrixB[$j]}\t"
	done
	echo

	return 0
}

transpose () {
	if [[ -z $1 ]]; then
		FILE=${1:-/dev/stdin}
	elif [[ -e "$1" ]]; then
		FILE=$1
	elif [[ !(-e "$1") ]]; then
		echo "$1 does not exist!" 1>&2
		exit 1
	fi

	declare -A matrixA

	row=0
	col=0
	while read line; do
		col=0
		for i in $line; do
			matrixA[$row,$col]=$i
			(( col++ ))
		done
		(( row++ ))
	done < "$FILE"

	for (( i = 0; i < $col; i++ )); do
		for (( j = 0; j < $row; j++ )); do
			echo -en "${matrixA[$j,$i]}\t"
		done
		echo
	done
}

case $1 in
	"dims")
		if [[ $# -gt 2 ]]; then
			echo "Too many args!" 1>&2
			exit 3
		else
			dims $2
		fi
		;;
	"add")
		if [[ $# -gt 3 ]]; then
			echo "Too many args!" 1>&2
			exit 3
		else
			add $2 $3
		fi
		;;
	"mean")
		if [[ $# -gt 2 ]]; then
			echo "Too many args!" 1>&2
			exit 3
		else
			mean $2
		fi
		;;
	"transpose")
		if [[ $# -gt 2 ]]; then
			echo "Too many args!" 1>&2
			exit 3
		else
			transpose $2
		fi
		;;
	*)
		;;
esac
